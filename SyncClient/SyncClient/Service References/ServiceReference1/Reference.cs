//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SyncClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/NBaseHonsenService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        SyncClient.ServiceReference1.CompositeType GetDataUsingDataContract(SyncClient.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<SyncClient.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(SyncClient.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/データ同期", ReplyAction="http://tempuri.org/IService1/データ同期Response")]
        string データ同期(int vesselSchemaVersion, string xml, decimal maxDataNoOfVesselIdZero, decimal maxDataNo, int vesselId, string hostName, string modueVersion, string userId, System.DateTime vesselDate, int curNo, int maxNo, int counter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/データ同期", ReplyAction="http://tempuri.org/IService1/データ同期Response")]
        System.Threading.Tasks.Task<string> データ同期Async(int vesselSchemaVersion, string xml, decimal maxDataNoOfVesselIdZero, decimal maxDataNo, int vesselId, string hostName, string modueVersion, string userId, System.DateTime vesselDate, int curNo, int maxNo, int counter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/文書データ同期_送信", ReplyAction="http://tempuri.org/IService1/文書データ同期_送信Response")]
        string 文書データ同期_送信(string xml, int vesselId, string hostName, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/文書データ同期_送信", ReplyAction="http://tempuri.org/IService1/文書データ同期_送信Response")]
        System.Threading.Tasks.Task<string> 文書データ同期_送信Async(string xml, int vesselId, string hostName, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/文書データ同期_受信", ReplyAction="http://tempuri.org/IService1/文書データ同期_受信Response")]
        string 文書データ同期_受信(System.Collections.Generic.List<string> requestOdAttachFileIds, System.Collections.Generic.List<string> requestHoukokushoIds, System.Collections.Generic.List<string> requestKanriKirokuIds, System.Collections.Generic.List<string> requestKoubunshoKisokuIds, int vesselId, string hostName, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/文書データ同期_受信", ReplyAction="http://tempuri.org/IService1/文書データ同期_受信Response")]
        System.Threading.Tasks.Task<string> 文書データ同期_受信Async(System.Collections.Generic.List<string> requestOdAttachFileIds, System.Collections.Generic.List<string> requestHoukokushoIds, System.Collections.Generic.List<string> requestKanriKirokuIds, System.Collections.Generic.List<string> requestKoubunshoKisokuIds, int vesselId, string hostName, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/添付ファイル同期_送信", ReplyAction="http://tempuri.org/IService1/添付ファイル同期_送信Response")]
        string 添付ファイル同期_送信(string xml, int vesselId, string hostName, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/添付ファイル同期_送信", ReplyAction="http://tempuri.org/IService1/添付ファイル同期_送信Response")]
        System.Threading.Tasks.Task<string> 添付ファイル同期_送信Async(string xml, int vesselId, string hostName, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SyncMaster", ReplyAction="http://tempuri.org/IService1/SyncMasterResponse")]
        string SyncMaster(int syncTableNo, decimal maxDataNo, int vesselId, string hostName, string userId, System.DateTime vesselDate, int counter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SyncMaster", ReplyAction="http://tempuri.org/IService1/SyncMasterResponse")]
        System.Threading.Tasks.Task<string> SyncMasterAsync(int syncTableNo, decimal maxDataNo, int vesselId, string hostName, string userId, System.DateTime vesselDate, int counter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SyncData", ReplyAction="http://tempuri.org/IService1/SyncDataResponse")]
        string SyncData(string xml, int syncTableNo, decimal maxDataNo, int vesselId, string hostName, string userId, System.DateTime vesselDate, int counter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SyncData", ReplyAction="http://tempuri.org/IService1/SyncDataResponse")]
        System.Threading.Tasks.Task<string> SyncDataAsync(string xml, int syncTableNo, decimal maxDataNo, int vesselId, string hostName, string userId, System.DateTime vesselDate, int counter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SyncSnParameter", ReplyAction="http://tempuri.org/IService1/SyncSnParameterResponse")]
        string SyncSnParameter(int vesselId, string hostName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SyncSnParameter", ReplyAction="http://tempuri.org/IService1/SyncSnParameterResponse")]
        System.Threading.Tasks.Task<string> SyncSnParameterAsync(int vesselId, string hostName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : SyncClient.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<SyncClient.ServiceReference1.IService1>, SyncClient.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public SyncClient.ServiceReference1.CompositeType GetDataUsingDataContract(SyncClient.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<SyncClient.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(SyncClient.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public string データ同期(int vesselSchemaVersion, string xml, decimal maxDataNoOfVesselIdZero, decimal maxDataNo, int vesselId, string hostName, string modueVersion, string userId, System.DateTime vesselDate, int curNo, int maxNo, int counter) {
            return base.Channel.データ同期(vesselSchemaVersion, xml, maxDataNoOfVesselIdZero, maxDataNo, vesselId, hostName, modueVersion, userId, vesselDate, curNo, maxNo, counter);
        }
        
        public System.Threading.Tasks.Task<string> データ同期Async(int vesselSchemaVersion, string xml, decimal maxDataNoOfVesselIdZero, decimal maxDataNo, int vesselId, string hostName, string modueVersion, string userId, System.DateTime vesselDate, int curNo, int maxNo, int counter) {
            return base.Channel.データ同期Async(vesselSchemaVersion, xml, maxDataNoOfVesselIdZero, maxDataNo, vesselId, hostName, modueVersion, userId, vesselDate, curNo, maxNo, counter);
        }
        
        public string 文書データ同期_送信(string xml, int vesselId, string hostName, string userId) {
            return base.Channel.文書データ同期_送信(xml, vesselId, hostName, userId);
        }
        
        public System.Threading.Tasks.Task<string> 文書データ同期_送信Async(string xml, int vesselId, string hostName, string userId) {
            return base.Channel.文書データ同期_送信Async(xml, vesselId, hostName, userId);
        }
        
        public string 文書データ同期_受信(System.Collections.Generic.List<string> requestOdAttachFileIds, System.Collections.Generic.List<string> requestHoukokushoIds, System.Collections.Generic.List<string> requestKanriKirokuIds, System.Collections.Generic.List<string> requestKoubunshoKisokuIds, int vesselId, string hostName, string userId) {
            return base.Channel.文書データ同期_受信(requestOdAttachFileIds, requestHoukokushoIds, requestKanriKirokuIds, requestKoubunshoKisokuIds, vesselId, hostName, userId);
        }
        
        public System.Threading.Tasks.Task<string> 文書データ同期_受信Async(System.Collections.Generic.List<string> requestOdAttachFileIds, System.Collections.Generic.List<string> requestHoukokushoIds, System.Collections.Generic.List<string> requestKanriKirokuIds, System.Collections.Generic.List<string> requestKoubunshoKisokuIds, int vesselId, string hostName, string userId) {
            return base.Channel.文書データ同期_受信Async(requestOdAttachFileIds, requestHoukokushoIds, requestKanriKirokuIds, requestKoubunshoKisokuIds, vesselId, hostName, userId);
        }
        
        public string 添付ファイル同期_送信(string xml, int vesselId, string hostName, string userId) {
            return base.Channel.添付ファイル同期_送信(xml, vesselId, hostName, userId);
        }
        
        public System.Threading.Tasks.Task<string> 添付ファイル同期_送信Async(string xml, int vesselId, string hostName, string userId) {
            return base.Channel.添付ファイル同期_送信Async(xml, vesselId, hostName, userId);
        }
        
        public string SyncMaster(int syncTableNo, decimal maxDataNo, int vesselId, string hostName, string userId, System.DateTime vesselDate, int counter) {
            return base.Channel.SyncMaster(syncTableNo, maxDataNo, vesselId, hostName, userId, vesselDate, counter);
        }
        
        public System.Threading.Tasks.Task<string> SyncMasterAsync(int syncTableNo, decimal maxDataNo, int vesselId, string hostName, string userId, System.DateTime vesselDate, int counter) {
            return base.Channel.SyncMasterAsync(syncTableNo, maxDataNo, vesselId, hostName, userId, vesselDate, counter);
        }
        
        public string SyncData(string xml, int syncTableNo, decimal maxDataNo, int vesselId, string hostName, string userId, System.DateTime vesselDate, int counter) {
            return base.Channel.SyncData(xml, syncTableNo, maxDataNo, vesselId, hostName, userId, vesselDate, counter);
        }
        
        public System.Threading.Tasks.Task<string> SyncDataAsync(string xml, int syncTableNo, decimal maxDataNo, int vesselId, string hostName, string userId, System.DateTime vesselDate, int counter) {
            return base.Channel.SyncDataAsync(xml, syncTableNo, maxDataNo, vesselId, hostName, userId, vesselDate, counter);
        }
        
        public string SyncSnParameter(int vesselId, string hostName) {
            return base.Channel.SyncSnParameter(vesselId, hostName);
        }
        
        public System.Threading.Tasks.Task<string> SyncSnParameterAsync(int vesselId, string hostName) {
            return base.Channel.SyncSnParameterAsync(vesselId, hostName);
        }
    }
}
